# fractalic: excluding settings.toml file
settings.toml

# OAuth tokens and sensitive authentication data
oauth_tokens.json
oauth_tokens_simple.json
oauth_tokens.json.backup
oauth_tokens.json.fixed
oauth_tokens.json.repair
oauth_redirect_state.json
*.oauth_tokens.json

# OAuth cache folder
oauth-cache/

# Development and debugging utilities
utils/oauth_debug/
debug_*.py
analyze_*.py
inspect_*.py
diagnose_*.py

# Tutorials and examples (user-generated content) - COMPLETELY EXCLUDED
tutorials/
*.ctx
*.trc
.gitignore
call_tree.json

# Test artifacts and generated files
tests/**/*.ctx
tests/**/*.trc
tests/**/call_tree.json
tests/**/.git/
tests/**/.gitignore

# Test git repositories created by Fractalic execution
tutorials/**/.git/
tutorials/**/.git
tutorials/**/call_tree.json
tutorials/**/*.ctx
tutorials/**/*.trc

# All git-related files in tutorials (nested at any level)
tutorials/**/.gitignore
tutorials/**/.gitattributes

# Specific test directories that are git repos
tutorials/03-context/
tutorials/Unified-Demo/
tutorials/agent-playground/
tutorials/claude-code/
tutorials/context-test/
tutorials/context-test-v002/
tutorials/lyricstest/
tutorials/token-tracking-test/
tutorials/tools-test/

# Build artifacts and temporary directories
# These should never be in the main repo - they belong in temp build directories
/fractalic/
/fractalic-ui/
build/
temp/
tmp/
.tmp/

# macOS
.DS_Store

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/


# PyPI configuration file
.pypirc
.DS_Store
mcp_servers.json
DBG_TOOLS.json
*.pyc
.idea/
.vscode/
tutorials/mcp-integration-tests/
CLAUDE.md
