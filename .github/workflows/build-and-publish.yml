name: Build and Publish to PyPI

on:
  # Trigger on new releases
  release:
    types: [published]
  
  # Trigger on version tags (e.g., v1.0.0, v1.2.3)
  push:
    tags:
      - 'v*'
  
  # Allow manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI (not just Test PyPI)'
        required: false
        default: false
        type: boolean

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      packages: write  # Required for package publishing
      id-token: write  # Required for trusted publishing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          # Use date-based version for manual runs
          VERSION=$(date +%Y.%m.%d.%H%M%S)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
        echo "Detected version: $VERSION"
    
    - name: Update version in files
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update pyproject.toml
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        
        # Update __init__.py
        sed -i "s/^__version__ = .*/__version__ = \"$VERSION\"/" __init__.py
        
        echo "Updated version to: $VERSION"
        cat pyproject.toml | grep "^version"
        cat __init__.py | grep "^__version__"
    
    - name: Build package
      run: |
        echo "🔨 Building package..."
        python -m build
        
        echo "📦 Built packages:"
        ls -la dist/
        
        echo "🔍 Package contents:"
        python -m zipfile -l dist/*.whl | head -20
    
    - name: Check package
      run: |
        echo "🔍 Checking package with twine..."
        python -m twine check dist/*
    
    - name: Test installation
      run: |
        echo "🧪 Testing package installation..."
        pip install dist/*.whl
        fractalic --help
        python -c "import fractalic; print('✅ Package imports successfully')"
    
    # Always publish to Test PyPI for validation
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "📤 Publishing to Test PyPI..."
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "⚠️ TEST_PYPI_API_TOKEN secret not found, skipping Test PyPI upload"
          exit 0
        fi
        python -m twine upload --repository testpypi dist/* || echo "⚠️ Test PyPI upload failed (might be version conflict)"
    
    # Publish to production PyPI only for releases or manual trigger
    - name: Publish to PyPI
      if: steps.version.outputs.is_release == 'true' || github.event.inputs.publish_to_pypi == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "❌ PYPI_API_TOKEN secret not found, cannot publish to PyPI"
          exit 1
        fi
        python -m twine upload dist/*
    
    - name: Create GitHub Release (if from tag)
      if: steps.version.outputs.is_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## 🎉 Fractalic ${{ steps.version.outputs.version }}
          
          **Installation:**
          ```bash
          pip install fractalic==${{ steps.version.outputs.version }}
          ```
          
          **Usage:**
          ```bash
          fractalic --help
          fractalic your_workflow.md
          ```
          
          **Changes:**
          - Automated release via GitHub Actions
          - Available on PyPI: https://pypi.org/project/fractalic/
        draft: false
        prerelease: false
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Summary
      run: |
        echo "## 🎉 Build Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Files built:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -la dist/ >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.version.outputs.is_release }}" == "true" || "${{ github.event.inputs.publish_to_pypi }}" == "true" ]]; then
          echo "**✅ Published to PyPI:** https://pypi.org/project/fractalic/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Install with:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install fractalic==${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "**📦 Available on Test PyPI for testing**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test with:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install --index-url https://test.pypi.org/simple/ fractalic==${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
