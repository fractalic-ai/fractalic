name: Build and Push Multi-Architecture Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fractalic

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout Fractalic repository
      uses: actions/checkout@v4
      with:
        path: fractalic
        submodules: recursive

    - name: Checkout Fractalic-UI repository
      uses: actions/checkout@v4
      with:
        repository: fractalic-ai/fractalic-ui
        path: fractalic-ui
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Create build context structure
      run: |
        echo "Setting up build context to match local deployment structure..."
        echo "=== Workspace Structure ==="
        ls -la
        echo ""
        echo "=== Fractalic Directory ==="
        ls -la fractalic/ | head -10
        echo ""
        if [ -d "fractalic-ui" ] && [ -f "fractalic-ui/package.json" ]; then
          echo "✅ Fractalic-UI directory found with package.json:"
          ls -la fractalic-ui/ | head -10
          echo "Package.json exists: $(ls -la fractalic-ui/package.json)"
        else
          echo "❌ Fractalic-UI directory not found or invalid, build will fail!"
          echo "This is expected to be a fatal error for production builds."
          echo "Available directories:"
          ls -la
          exit 1
        fi
        echo ""
        echo "=== Docker Files ==="
        ls -la fractalic/docker/
        echo ""
        echo "Build context is ready - both fractalic/ and fractalic-ui/ are siblings"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./fractalic/docker/Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test multi-arch images
      run: |
        echo "Testing AMD64 image..."
        docker run --rm --platform linux/amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python --version
        
        echo "Testing ARM64 image..."
        docker run --rm --platform linux/arm64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python --version

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
